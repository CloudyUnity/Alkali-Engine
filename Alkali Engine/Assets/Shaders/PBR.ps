#define BUMP_2_CHANNEL 0

struct V_OUT
{
    float4 Position : SV_Position;
    float2 UV : TEXCOORD0;
    float3 Normal : NORMAL;    
    float3 Tangent : TANGENT;
    float3 Binormal : BINORMAL;
    float3 ViewDirection : TEXCOORD1;
};

struct DirectionalLight
{
    float3 AmbientColor;
    float3 LightDirection;
    float3 LightDiffuse;
    float SpecularPower;

    float2 p;
};
ConstantBuffer<DirectionalLight> DirLightCB : register(b2);

Texture2D g_texture : register(t0);
Texture2D g_normalMap : register(t1);
SamplerState g_sampler : register(s0);

float4 main(V_OUT input) : SV_Target
{
    float4 tex = g_texture.Sample(g_sampler, input.UV);    
    tex.rgb = pow(tex.rgb, 2.2f);

#if BUMP_2_CHANNEL
    float2 bump = g_normalMap.Sample(g_sampler, input.UV).rg;

    float3 normalTangentSpace;
    normalTangentSpace.xy = bump * 2.0f - 1.0f;
    normalTangentSpace.z = sqrt(1.0f - dot(normalTangentSpace.xy, normalTangentSpace.xy));
#else
    float3 normalTangentSpace = g_normalMap.Sample(g_sampler, input.UV).rgb;
    normalTangentSpace.xyz = normalTangentSpace.xyz * 2.0f - 1.0f;
#endif

    float3 normalWorld = normalize(
        normalTangentSpace.x * input.Tangent +
        normalTangentSpace.y * input.Binormal +
        normalTangentSpace.z * input.Normal);    

    float4 finalCol = float4(DirLightCB.AmbientColor, tex.a);

    float intensity = max(0, dot(-DirLightCB.LightDirection, normalWorld));    
    float specular = 0;
    
    if (intensity > 0.0f)
    {
        finalCol.rgb += DirLightCB.LightDiffuse * intensity;
        float3 reflection = normalize(2.0f * intensity * normalWorld + DirLightCB.LightDirection); 
        specular = pow(saturate(dot(reflection, input.ViewDirection)), DirLightCB.SpecularPower);
    }
    
    finalCol.rgb = saturate(saturate(finalCol.rgb + specular) * tex.rgb);
    finalCol.rgb = pow(finalCol.rgb, 1.0f / 2.2f);
    
    //return float4(frac(input.UV), sign(input.UV.y), 1);
    //return float4(frac(input.UV), 0, 1);
    //return float4(abs(input.Normal), 1);
    //return float4(abs(input.Tangent), 1);
    //return float4(abs(input.Binormal), 1); 

    return finalCol;
}