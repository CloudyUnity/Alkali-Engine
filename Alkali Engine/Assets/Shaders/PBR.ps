#define BUMP_2_CHANNEL 1

#define PI 3.141592654f

#define CASCADES 4

#define DRAW_SPACE space0
#define FRAME_SPACE space1

#define SRV_SPACE space0
#define SRV_DYNAMIC_SPACE space1

struct V_OUT
{
    float4 Position : SV_Position;
    float2 UV : TEXCOORD0;
    float3 Normal : NORMAL;    
    float3 Tangent : TANGENT;
    float3 Binormal : BINORMAL;

    float3 ViewDirection : TEXCOORD1;
    float ViewDepth : TEXCOORD2;

    float4 ShadowMapCoords[CASCADES] : TEXCOORD3;
};

struct DirectionalLight
{
    float3 AmbientColor;
    float p1;

    float3 LightDirection;
    float p2;

    float3 LightColor;
    float SpecularPower;
};
ConstantBuffer<DirectionalLight> DirLightCB : register(b1, FRAME_SPACE);

struct ShadowMapPixel
{
    float4 CascadeDistances; // Max 4 cascades
    
    float Bias;
    float ShadowWidthPercent;
    float2 TexelSize;

    float PCFSampleCount;
    float PCFSampleRange;
    float CascadeCount;
    float p;

    float4 PoissonDisc[16];
};
ConstantBuffer<ShadowMapPixel> ShadowPixelCB : register(b3, FRAME_SPACE);

struct EnvMap
{
    uint EnvMapMipLevels;
};
ConstantBuffer<EnvMap> EnvMapCB : register(b4, FRAME_SPACE);

struct MaterialProperties
{
    float3 BaseColorFactor;
    float Roughness;    

    float AlphaCutoff;
    float IOR;
    float Dispersion;
    float Metallic;
};
ConstantBuffer<MaterialProperties> MatPropCB : register(b1, DRAW_SPACE);

struct ThinFilmData
{
    float Thickness;
    float n0, n1, n2;

    float Delta;
    bool Enabled;
    float2 p;
};
ConstantBuffer<ThinFilmData> ThinFilmCB : register(b2, DRAW_SPACE);

Texture2D g_texture : register(t0, SRV_SPACE);
Texture2D g_normalMap : register(t1, SRV_SPACE);
Texture2D g_specularMap : register(t2, SRV_SPACE);
TextureCube g_irradiance : register(t3, SRV_SPACE);
TextureCube g_envMap : register(t4, SRV_SPACE);
Texture2D g_blueNoise : register(t5, SRV_SPACE);
Texture2D g_brdfIntMap : register(t6, SRV_SPACE);

Texture2D g_shadowMap : register(t0, SRV_DYNAMIC_SPACE);

SamplerState g_sampler : register(s0);
SamplerState g_samplerClamp : register(s1);

float D_GGX(float NdH, float roughness);
float3 F_Schlick(float cosTheta, float3 F0);
float G_Smith(float NdL, float NdV, float roughness);
float3 F_ThinFilm(float NdV);

float4 main(V_OUT input) : SV_Target
{    
    float4 tex = g_texture.Sample(g_sampler, input.UV);                
    float alpha = tex.a > MatPropCB.AlphaCutoff;
    //clip(alpha - 0.5f);

    tex.rgb = pow(tex.rgb, 2.2f);    

    float blueNoise = saturate(g_blueNoise.Sample(g_sampler, input.UV).r);

    float4 cascadeComparison = (input.ViewDepth > ShadowPixelCB.CascadeDistances);

    float fCascadeIndex = dot(float4(ShadowPixelCB.CascadeCount > 0, ShadowPixelCB.CascadeCount > 1, ShadowPixelCB.CascadeCount > 2, ShadowPixelCB.CascadeCount > 3), cascadeComparison);
    fCascadeIndex = min(fCascadeIndex, CASCADES); // Why?
    int iCascadeIndex = (int)fCascadeIndex - 1;    

    float3 shadowCoords = input.ShadowMapCoords[iCascadeIndex];
    shadowCoords.y = 1 - shadowCoords.y;
    shadowCoords.x = ShadowPixelCB.ShadowWidthPercent * (shadowCoords.x + iCascadeIndex);
    float pixelDepth = shadowCoords.z + ShadowPixelCB.Bias;    

    float shadowFactor = 0;
    int i = 0;
    for (float y = -ShadowPixelCB.PCFSampleRange; y <= ShadowPixelCB.PCFSampleRange; y++)
        for (float x = -ShadowPixelCB.PCFSampleRange; x <= ShadowPixelCB.PCFSampleRange; x++)
        {
            int poissonIndex = (i * blueNoise * ShadowPixelCB.PCFSampleCount) % ShadowPixelCB.PCFSampleCount;
            float2 coord = shadowCoords.xy + (float2(x, y) * ShadowPixelCB.PoissonDisc[poissonIndex].xy) * ShadowPixelCB.TexelSize;
            float shadowMapDepth = g_shadowMap.Sample(g_sampler, coord).r;

            shadowFactor += pixelDepth < shadowMapDepth;   
            i++;
        }
    shadowFactor /= i;      

#if BUMP_2_CHANNEL
    float2 bump = g_normalMap.Sample(g_sampler, input.UV).rg;

    float3 normalTangentSpace;
    normalTangentSpace.xy = bump * 2.0f - 1.0f;
    normalTangentSpace.z = sqrt(1.0f - dot(normalTangentSpace.xy, normalTangentSpace.xy));
#else
    float3 normalTangentSpace = g_normalMap.Sample(g_sampler, input.UV).rgb;
    normalTangentSpace.xyz = normalTangentSpace.xyz * 2.0f - 1.0f;
#endif    

    float3 occlusionRoughnessMetallic = g_specularMap.Sample(g_sampler, input.UV).rgb;    
    float roughness = occlusionRoughnessMetallic.g * MatPropCB.Roughness;
    float metalness = occlusionRoughnessMetallic.b * MatPropCB.Metallic;

    float3 N = normalize(normalTangentSpace.x * input.Tangent + normalTangentSpace.y * input.Binormal + normalTangentSpace.z * input.Normal);    
    float3 L = normalize(DirLightCB.LightDirection);
    float3 V = normalize(input.ViewDirection);
    float3 H = normalize(-L + V);
    float3 R = reflect(-V, N);

    float NdL = saturate(dot(N, -L)) * shadowFactor;     
    float NdV = saturate(dot(N, V));
    float HdV = saturate(dot(H, V));
    float NdH = saturate(dot(N, H));
    float HdL = saturate(dot(H, -L));   

    float3 irradiance = g_irradiance.SampleLevel(g_sampler, N, 0).rgb;   

    //==============================================================        

    float3 albedo = tex.rgb * MatPropCB.BaseColorFactor;
    float3 F0 = lerp(0.04f, albedo, metalness);

    float D = D_GGX(NdH, roughness);    
    float3 F = ThinFilmCB.Enabled ? F_ThinFilm(NdV) : F_Schlick(HdV, F0);
    float G = G_Smith(NdL, NdV, roughness);

    float kS = max(0, F);
    float kD = (1.0f - kS);

    float3 envReflections = g_envMap.SampleLevel(g_sampler, R, roughness * EnvMapCB.EnvMapMipLevels).rgb;
    envReflections = pow(envReflections, 2.2f);
    float2 brdfInt = g_brdfIntMap.SampleLevel(g_samplerClamp, saturate(float2(max(NdV, 0), roughness)), 0).rg;
    float3 indirectSpecular = envReflections * (F * brdfInt.r + brdfInt.g) * kS;
    indirectSpecular = max(0, indirectSpecular);

    float3 specularDFG = (D * F * G) / max(0.001f, 4.0f * NdV);
    float3 specular = specularDFG * DirLightCB.LightColor;
    specular = max(0, specular); 
    
    float3 diffuse = irradiance * kD * albedo * DirLightCB.LightColor * NdL;  
    diffuse *= 1 - metalness;    

    float3 ambient = irradiance * kD * albedo * DirLightCB.AmbientColor; 

    float3 Lo = diffuse + specular + ambient + indirectSpecular;

    Lo = pow(Lo, 1.0f / 2.2f);    
    return float4(Lo, 1);
}

float D_GGX(float NdH, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float denominator = (NdH * NdH * (a2 - 1.0f) + 1.0f);
    return a2 / max(0.001f, PI * denominator * denominator);
}

// 5 is the sharpness, can be modified
float3 F_Schlick(float cosTheta, float3 F0)
{
    return F0 + (1.0f - F0) * pow(1.0f - cosTheta, 5.0f);
}

float G_Smith(float NdL, float NdV, float roughness)
{
    float r = roughness + 1;
    float k = (r * r) / 8.0f;
    
    float ggxL = NdL / (NdL * (1.0f - k) + k);
    float ggxV = NdV / (NdV * (1.0f - k) + k);

    return ggxL * ggxV;
}

/* Amplitude reflection coefficient (s-polarized) */ 
float rs(float n1, float n2, float cosI, float cosT) 
{ 
    return (n1 * cosI - n2 * cosT) / (n1 * cosI + n2 * cosT); 
} 
    
/* Amplitude reflection coefficient (p-polarized) */ 
float rp(float n1, float n2, float cosI, float cosT) 
{ 
    return (n2 * cosI - n1 * cosT) / (n1 * cosT + n2 * cosI); 
} 
    
/* Amplitude transmission coefficient (s-polarized) */ 
float ts(float n1, float n2, float cosI, float cosT) 
{ 
    return 2 * n1 * cosI / (n1 * cosI + n2 * cosT); 
} 
    
/* Amplitude transmission coefficient (p-polarized) */ 
float tp(float n1, float n2, float cosI, float cosT) 
{ 
    return 2 * n1 * cosI / (n1 * cosT + n2 * cosI); 
} 

float3 F_ThinFilm(float NdV) 
{ 
    float n0 = ThinFilmCB.n0;
    float n1 = ThinFilmCB.n1;
    float n2 = ThinFilmCB.n2;
    float cos0 = NdV;    
    
    float sin1 = pow(n0 / n1, 2) * (1 - pow(cos0, 2)); 
    if (sin1 > 1) 
        return 1.0f; 
    
    float cos1 = sqrt(1 - sin1); 
    
    float sin2 = pow(n0 / n2, 2) * (1 - pow(cos0, 2)); 
    if (sin2 > 1) 
        return 1.0f; 
    
    float cos2 = sqrt(1 - sin2); 
    
    float alpha_s = rs(n1, n0, cos1, cos0) * rs(n1, n2, cos1, cos2);     
    float alpha_p = rp(n1, n0, cos1, cos0) * rp(n1, n2, cos1, cos2);     
    float beta_s = ts(n0, n1, cos0, cos1) * ts(n1, n2, cos1, cos2);     
    float beta_p = tp(n0, n1, cos0, cos1) * tp(n1, n2, cos1, cos2); 

    float3 wavelength = float3(650, 510, 475);
    
    float3 phi = (2 * PI / wavelength) * (2 * n1 * ThinFilmCB.Thickness * cos1) + ThinFilmCB.Delta; 
    
    float3 ts = pow(beta_s, 2) / (pow(alpha_s, 2) - 2 * alpha_s * cos(phi) + 1); 
    float3 tp = pow(beta_p, 2) / (pow(alpha_p, 2) - 2 * alpha_p * cos(phi) + 1); 
    
    float beamRatio = (n2 * cos2) / (n0 * cos0); 
    
    // calculate the average transmitted intensity (if you know the polarization distribution of your 
    // light source, you should specify it here. if you don't, a 50%/50% average is generally used) 
    float3 transmittedLight = beamRatio * (ts + tp) / 2; 
    
    return 1 - transmittedLight; 
} 