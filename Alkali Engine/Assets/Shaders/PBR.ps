#define BUMP_2_CHANNEL 1

struct V_OUT
{
    float4 Position : SV_Position;
    float2 UV : TEXCOORD0;
    float3 Normal : NORMAL;    
    float3 Tangent : TANGENT;
    float3 Binormal : BINORMAL;
    float3 ViewDirection : TEXCOORD1;
};

struct DirectionalLight
{
    float3 AmbientColor;
    float p1;

    float3 LightDirection;
    float p2;

    float3 LightDiffuse;
    float SpecularPower;
};
ConstantBuffer<DirectionalLight> DirLightCB : register(b3);

struct MaterialProperties
{
    float3 BaseColorFactor;
    float Roughness;    

    float AlphaCutoff;
    float IOR;
    float Dispersion;
    float p;
};
ConstantBuffer<MaterialProperties> MatPropCB : register(b1);

Texture2D g_texture : register(t0);
Texture2D g_normalMap : register(t1);
Texture2D g_specularMap : register(t2);
SamplerState g_sampler : register(s0);

float4 main(V_OUT input) : SV_Target
{
    float4 tex = g_texture.Sample(g_sampler, input.UV);    
    tex.rgb = pow(tex.rgb, 2.2f);

#if BUMP_2_CHANNEL
    float2 bump = g_normalMap.Sample(g_sampler, input.UV).rg;

    float3 normalTangentSpace;
    normalTangentSpace.xy = bump * 2.0f - 1.0f;
    normalTangentSpace.z = sqrt(1.0f - dot(normalTangentSpace.xy, normalTangentSpace.xy));
#else
    float3 normalTangentSpace = g_normalMap.Sample(g_sampler, input.UV).rgb;
    normalTangentSpace.xyz = normalTangentSpace.xyz * 2.0f - 1.0f;
#endif

    float3 normalWorld = normalize(
        normalTangentSpace.x * input.Tangent +
        normalTangentSpace.y * input.Binormal +
        normalTangentSpace.z * input.Normal);    

    float3 specData = g_specularMap.Sample(g_sampler, input.UV).rgb;
    float specularIntensity = specData.g;
    float glossiness = 1;
    float metalness = specData.b;

    float4 finalCol = float4(0, 0, 0, tex.a);

    float3 viewDir = normalize(input.ViewDirection);
    float NdotL = saturate(dot(normalWorld, -DirLightCB.LightDirection));
    float3 diffuse = tex.rgb * (metalness + DirLightCB.AmbientColor + DirLightCB.LightDiffuse * NdotL);

    float3 reflectDir = reflect(DirLightCB.LightDirection, normalWorld);
    float spec = pow(saturate(dot(viewDir, reflectDir)), DirLightCB.SpecularPower * glossiness) * specularIntensity * (1.0f - metalness);

    finalCol.rgb += diffuse + saturate(spec * DirLightCB.LightDiffuse);
    finalCol.rgb = pow(finalCol.rgb, 1.0f / 2.2f);

    return finalCol;
}